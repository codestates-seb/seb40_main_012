buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.asciidoctor.jvm.convert' version "3.3.2" // Spring Rest Docs
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"	//QueryDsl
	id 'java'
}

group = 'seb40_main_012'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets")) // Spring Rest Docs
}

configurations {
	asciidoctorExtensions // Spring Rest Docs
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-security'
    //    --------------------------------------------------------------------------------------------
	implementation 'com.googlecode.json-simple:json-simple:1.1.1' // 책 정보 검색
	implementation 'org.projectlombok:lombok:1.18.24'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    //    --------------------------------------------------------------------------------------------
    implementation 'org.springframework.boot:spring-boot-starter-websocket:' // WebSocket
    implementation 'org.webjars:sockjs-client:1.5.1' // SockJS
    implementation 'org.webjars:stomp-websocket:2.3.4' // STOMP
    implementation 'org.springframework.boot:spring-boot-devtools:' // DevTools
	implementation 'org.springframework.boot:spring-boot-starter-mail' // Email 전송
	implementation 'org.springframework.boot:spring-boot-starter-aop' // 스프링 AOP
    //    --------------------------------------------------------------------------------------------
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // Spring Rest Docs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor' // Spring Rest Docs
    testImplementation 'org.springframework.security:spring-security-test' // Spring Security Test
    implementation 'org.springframework.boot:spring-boot-starter-test' // JUnit4 Test
    //    --------------------------------------------------------------------------------------------
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // 사진 저장을 위해 추가
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.2' // S3 이미지 업로드를 위해 추가
	implementation 'com.github.downgoon:marvin:1.5.5' // 이미지 리사이징을 위한 라이브러리
	implementation 'com.github.downgoon:MarvinPlugins:1.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas' // 하이퍼링크를 위해 추가
	implementation 'commons-io:commons-io:2.11.0' // 사진 업로드
	implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.4' // 사진 업로드
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	runtimeOnly 'com.h2database:h2'
//	runtimeOnly 'mysql:mysql-connector-java'
    //    --------------------------------------------------------------------------------------------
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'com.google.code.gson:gson'
    //    --------------------------------------------------------------------------------------------
//	QueryDsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
	//    --------------------------------------------------------------------------------------------
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // 임시 사용
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // OAuth2
}

//tasks.named('test') {
//	useJUnitPlatform()
//}

tasks.named('test') {
	outputs.dir snippetsDir // Spring Rest Docs
	useJUnitPlatform()
}

tasks.named('asciidoctor') { // Spring Rest Docs
	configurations "asciidoctorExtensions"
	inputs.dir snippetsDir
	dependsOn test
}

task copyDocument(type: Copy) { // Spring Rest Docs
	dependsOn asciidoctor
	from file("${asciidoctor.outputDir}")
	into file("src/main/resources/static/docs")
}

build { // Spring Rest Docs
	dependsOn copyDocument
}

bootJar { // Spring Rest Docs
	dependsOn copyDocument
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}

test { // 빌드시 테스트 제외
	exclude '**/*'
}

asciidoctor { // 빌드시 asciidoctor 제외
	sources {
		exclude 'extensions/**'
	}
}

//==========================QueryDsl 관련 설정=================================

// querydsl 사용할 경로 지정합니다. 현재 지정한 부분은 .gitignore에 포함되므로 git에 올라가지 않습니다.
def querydslDir = "$buildDir/generated/'querydsl'"

// JPA 사용여부 및 사용 경로 설정
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

// build시 사용할 sourceSet 추가 설정
sourceSets {
	main.java.srcDir querydslDir
}

// querydsl 컴파일 시 사용할 옵션 설정
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

// querydsl이 compileClassPath를 상속하도록 설정
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}